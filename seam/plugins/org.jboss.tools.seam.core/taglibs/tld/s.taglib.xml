<?xml version="1.0" encoding="UTF-8"?>
<facelet-taglib id="s" version="2.0"
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd">
    <namespace>http://jboss.org/schema/seam/taglib</namespace>
    <tag>
        <tag-name>taskid</tag-name>
        <component>
            <description>Add the task id to an output link (or similar JSF control), when the task is available via #{task}.</description>
            <display-name>org.jboss.seam.ui.TaskId</display-name>
            <component-type>org.jboss.seam.ui.TaskId</component-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the parameter associated with this component.</description>
            <display-name>Property Name</display-name>
            <icon/>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Value of the parameter associated with this component.</description>
            <display-name>Property Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>link</tag-name>
        <component>
            <description>A link that supports invocation of an action with control over conversation propagation. Does not submit the form.</description>
            <display-name>org.jboss.seam.ui.Link</display-name>
            <component-type>org.jboss.seam.ui.Link</component-type>
            <renderer-type>org.jboss.seam.ui.LinkRenderer</renderer-type>
        </component>
        <attribute>
            <description>Access key that, when pressed, transfers focus to this element.</description>
            <display-name>Access Key</display-name>
            <icon/>
            <name>accesskey</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
            <display-name>Application Action</display-name>
            <icon/>
            <name>action</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Action Listener</display-name>
            <icon/>
            <name>actionListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The name of the conversation for natural conversations</description>
            <name>conversationName</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon/>
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon/>
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this element must never receive focus or be included in a subsequent submit.</description>
            <display-name>Disabled Flag</display-name>
            <icon/>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>the fragment identifier to link to.</description>
            <name>fragment</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>image</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <display-name>Immediate Action</display-name>
            <icon/>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Include page parameters defined in pages.xml when rendering the button</description>
            <name>includePageParams</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon/>
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon/>
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon/>
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon/>
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon/>
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon/>
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon/>
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon/>
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon/>
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon/>
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon/>
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>outcome</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>a pageflow definition to begin. (This is only useful when propagation="begin" or propagation="join".)</description>
            <name>pageflow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>determines the conversation propagation style: begin, join, nest, none, end or endRoot.</description>
            <name>propagation</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Specify the task to operate on (e.g. for @StartTask)</description>
            <name>taskInstance</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Type of button to create. Can be one of "submit", "button", "image" and "reset". If not specified, the default value is "submit".</description>
            <display-name>Button Type</display-name>
            <icon/>
            <name>type</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>the JSF view id to link to.</description>
            <name>view</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>decorate</tag-name>
        <component>
            <description>"Decorate" a JSF input field when validation fails or when required="true" is set.</description>
            <display-name>org.jboss.seam.ui.Decorate</display-name>
            <component-type>org.jboss.seam.ui.Decorate</component-type>
            <renderer-type>org.jboss.seam.ui.DecorateRenderer</renderer-type>
            <handler-class>org.jboss.seam.ui.handler.DecorateHandler</handler-class>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>the element to enclose the template used to decorate the input field. By default, the template is enclosed with a div element.</description>
            <name>element</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>if true, the template used to decorate the input field is enclosed by the element specified with the "element" attribute. By default this is a div element.</description>
            <name>enclose</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Id of the input field to decorate</description>
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon/>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon/>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>XHTML template to use to decorate the input field</description>
            <name>template</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon/>
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>formattedText</tag-name>
        <component>
            <description>Output Seam Text. Parse errors generate WARN level log messages.</description>
            <display-name>org.jboss.seam.ui.FormattedText</display-name>
            <component-type>org.jboss.seam.ui.FormattedText</component-type>
            <renderer-type>org.jboss.seam.ui.FormattedTextRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon/>
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>button</tag-name>
        <component>
            <description>A link that supports invocation of an action with control over conversation propagation</description>
            <display-name>org.jboss.seam.ui.Button</display-name>
            <component-type>org.jboss.seam.ui.Button</component-type>
            <renderer-type>org.jboss.seam.ui.ButtonRenderer</renderer-type>
            <handler-class>org.jboss.seam.ui.handler.CommandButtonParameterComponentHandler</handler-class>
        </component>
        <attribute>
            <description>Access key that, when pressed, transfers focus to this element.</description>
            <display-name>Access Key</display-name>
            <icon/>
            <name>accesskey</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
            <display-name>Application Action</display-name>
            <icon/>
            <name>action</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Action Listener</display-name>
            <icon/>
            <name>actionListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The name of the conversation for natural conversations</description>
            <name>conversationName</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon/>
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon/>
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this element must never receive focus or be included in a subsequent submit.</description>
            <display-name>Disabled Flag</display-name>
            <icon/>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>the fragment identifier to link to.</description>
            <name>fragment</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>image</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <display-name>Immediate Action</display-name>
            <icon/>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Include page parameters defined in pages.xml when rendering the button</description>
            <name>includePageParams</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon/>
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon/>
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon/>
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon/>
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon/>
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon/>
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon/>
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon/>
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon/>
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon/>
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon/>
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>outcome</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>a pageflow definition to begin. (This is only useful when propagation="begin" or propagation="join".)</description>
            <name>pageflow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>determines the conversation propagation style: begin, join, nest, none, end or endRoot.</description>
            <name>propagation</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Specify the task to operate on (e.g. for @StartTask)</description>
            <name>taskInstance</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Type of button to create. Can be one of "submit", "button", "image" and "reset". If not specified, the default value is "submit".</description>
            <display-name>Button Type</display-name>
            <icon/>
            <name>type</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>the JSF view id to link to.</description>
            <name>view</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>enumItem</tag-name>
        <component>
            <description>Creates a SelectItem from an enum value.</description>
            <display-name>org.jboss.seam.ui.EnumItem</display-name>
            <component-type>org.jboss.seam.ui.EnumItem</component-type>
        </component>
        <attribute>
            <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
            <display-name>Application Action</display-name>
            <icon/>
            <name>action</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Action Listener</display-name>
            <icon/>
            <name>actionListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>the string representation of the enum value.</description>
            <name>enumValue</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <display-name>Immediate Action</display-name>
            <icon/>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Description of the selection item represented by this component. This property may be used by tools.</description>
            <display-name>Item Description</display-name>
            <icon/>
            <name>itemDescription</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the selection item represented by this component must be rendered as disabled.</description>
            <display-name>Item Disabled</display-name>
            <icon/>
            <name>itemDisabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Label of the selection item represented by this component. This property is displayed to the user when the containing input component is rendered.</description>
            <display-name>Item Label</display-name>
            <icon/>
            <name>itemLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value returned to the server when a user chooses the selection item represented by this component.</description>
            <display-name>Item Value</display-name>
            <icon/>
            <name>itemValue</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>the label to be used when rendering the SelectItem.</description>
            <name>label</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>div</tag-name>
        <component>
            <description>&lt;![CDATA[Render a HTML &lt;div&gt;.]]&gt;</description>
            <display-name>org.jboss.seam.ui.Div</display-name>
            <component-type>org.jboss.seam.ui.Div</component-type>
            <renderer-type>org.jboss.seam.ui.DivRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>message</tag-name>
        <component>
            <description>Decorate a JSF input field with the validation error message.</description>
            <display-name>org.jboss.seam.ui.Message</display-name>
            <component-type>org.jboss.seam.ui.Message</component-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Client identifier of the component for which to display messages.</description>
            <display-name>Associated Client Id</display-name>
            <icon/>
            <name>for</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the detail portion of displayed messages should be included. Default value is "true".</description>
            <display-name>Show Detail</display-name>
            <icon/>
            <name>showDetail</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the summary portion of displayed messages should be included. Default value is "false".</description>
            <display-name>Show Summary</display-name>
            <icon/>
            <name>showSummary</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>token</tag-name>
        <component>
            <description>Render a secure token in the parent form that is validated on postback to guard against CSRF attacks</description>
            <display-name>org.jboss.seam.ui.Token</display-name>
            <component-type>org.jboss.seam.ui.Token</component-type>
            <renderer-type>org.jboss.seam.ui.TokenRenderer</renderer-type>
        </component>
        <attribute>
            <description>Indicates whether to allow the same form to be submitted multiple times with the same signature (as long as the view does not change). This is a common need if the form is perform Ajax calls but not rerendering itself or, at the very least, the UIToken component. The preferred approach is to have the UIToken component rerendered on any Ajax call where the UIToken component would be processed. The default value is false.</description>
            <name>allowMultiplePosts</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon/>
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Indicates whether a JavaScript check should be inserted into the page to verify that cookies are enabled in the browser. If cookies are not enabled, present a notice to the user that form posts will not work. The default value is false.</description>
            <name>enableCookieNotice</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Indicates whether the session id should be included in the form signature, hence binding the token to the session. This value can be set to false if the "build before restore" mode of Facelets is activated (the default in JSF 2.0). The default value is false.</description>
            <name>requireSession</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>transformImageSize</tag-name>
        <component>
            <description>Nested in a s:graphicImage. Transform an image by altering the size.</description>
            <display-name>org.jboss.seam.ui.graphicImage.TransformImageSize</display-name>
            <component-type>org.jboss.seam.ui.graphicImage.TransformImageSize</component-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Change the size of the image by a fraction. If factor is specified, height, width and maintainRatio should not be specified</description>
            <name>factor</name>
            <type>java.lang.Double</type>
        </attribute>
        <attribute>
            <description>The new height of the image</description>
            <name>height</name>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If true, don't alter the ratio of the image. In this case only height or width should be specificed.</description>
            <name>maintainRatio</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The new width of the image</description>
            <name>width</name>
            <type>java.lang.Integer</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>selection</tag-name>
        <component>
            <display-name>org.jboss.seam.ui.Selection</display-name>
            <component-type>org.jboss.seam.ui.Selection</component-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <name>dataModel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the parameter associated with this component.</description>
            <display-name>Property Name</display-name>
            <icon/>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Value of the parameter associated with this component.</description>
            <display-name>Property Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>transformImageType</tag-name>
        <component>
            <description>Nested in a s:graphicImage. Transform an image by changing it's type.</description>
            <display-name>org.jboss.seam.ui.graphicImage.TransformImageType</display-name>
            <component-type>org.jboss.seam.ui.graphicImage.TransformImageType</component-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The mime type of the output image</description>
            <name>contentType</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>remote</tag-name>
        <component>
            <description>Write out script element for use with Seam Remote</description>
            <display-name>org.jboss.seam.ui.Remote</display-name>
            <component-type>org.jboss.seam.ui.Remote</component-type>
            <renderer-type>org.jboss.seam.ui.RemoteRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The Seam components to include in the Seam Remoting JS interface stubs</description>
            <name>include</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon/>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon/>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon/>
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>span</tag-name>
        <component>
            <description>Render a HTML &lt;span&gt;</description>
            <display-name>org.jboss.seam.ui.Span</display-name>
            <component-type>org.jboss.seam.ui.Span</component-type>
            <renderer-type>org.jboss.seam.ui.SpanRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon/>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon/>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Span title attribute</description>
            <display-name>Advisory Title</display-name>
            <icon/>
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>validateEquality</tag-name>
        <component>
            <description>Validate all child JSF input fields against the bound propertys using Hibernate Validator.</description>
            <display-name>org.jboss.seam.ui.EqualityValidator</display-name>
            <component-type>org.jboss.seam.ui.EqualityValidator</component-type>
            <renderer-type>org.jboss.seam.ui.EqualityValidatorRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Id of component to validate against</description>
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Error message to show</description>
            <name>message</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Message id to use on failure</description>
            <name>messageId</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Operation to use.</description>
            <name>operator</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>True if a value is required for the filed to validate (default:true)</description>
            <name>required</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>cache</tag-name>
        <component>
            <description>Cache the rendered page fragment using the installed cache provider.</description>
            <display-name>org.jboss.seam.ui.Cache</display-name>
            <component-type>org.jboss.seam.ui.Cache</component-type>
            <renderer-type>org.jboss.seam.ui.CacheRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The cache provider to use, only needed if you install alter the default cache provider in an application where multiple cache providers are in use</description>
            <name>cacheProvider</name>
            <type>org.jboss.seam.cache.CacheProvider</type>
        </attribute>
        <attribute>
            <description>a value expression that determines if the cache should be used.</description>
            <name>enabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>the key to cache rendered content, often a value expression. For example, if we were caching a page fragment that displays a document, we might use key="Document-#{document.id}".</description>
            <name>key</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>a cache node to use (different nodes can have different expiry policies).</description>
            <name>region</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>label</tag-name>
        <component>
            <description>A label associated with the nearest JSF input component</description>
            <display-name>org.jboss.seam.ui.Label</display-name>
            <component-type>org.jboss.seam.ui.Label</component-type>
        </component>
        <attribute>
            <description>Access key that, when pressed, transfers focus to this element.</description>
            <display-name>Access Key</display-name>
            <icon/>
            <name>accesskey</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon/>
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Id of input component this label is for</description>
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <display-name>Focus Off Script</display-name>
            <icon/>
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus.</description>
            <display-name>Focus On Script</display-name>
            <icon/>
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767.</description>
            <display-name>Tab Index</display-name>
            <icon/>
            <name>tabindex</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>resource</tag-name>
        <component>
            <description>Given a data in form of an inputstream, java.util.File or byte[] and a content-type, this tag sends the data to the browser</description>
            <display-name>org.jboss.seam.ui.Resource</display-name>
            <component-type>org.jboss.seam.ui.Resource</component-type>
            <renderer-type>org.jboss.seam.ui.ResourceRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Content-type of given data</description>
            <name>contentType</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Inputstream, File or byte[].</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Content-Disposition for file (default: inline)</description>
            <name>disposition</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>file name to send to browser (default: name of view)</description>
            <name>fileName</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>conversationPropagation</tag-name>
        <component>
            <description>Customize the conversation propagation for a command link or button (or similar JSF control).</description>
            <display-name>org.jboss.seam.ui.ConversationPropagation</display-name>
            <component-type>org.jboss.seam.ui.ConversationPropagation</component-type>
            <renderer-type>org.jboss.seam.ui.ConversationPropagationRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the parameter associated with this component.</description>
            <display-name>Property Name</display-name>
            <icon/>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>a pageflow definition to begin. (This is only useful when propagation="begin" or propagation="join".)</description>
            <name>pageflow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>determines the conversation propagation style: begin, join, nested, none, end or endRoot.</description>
            <name>type</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Value of the parameter associated with this component.</description>
            <display-name>Property Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>validateAll</tag-name>
        <component>
            <description>&lt;![CDATA[Validate all child JSF input fields against the bound propertys using Hibernate Validator.]]&gt;</description>
            <display-name>org.jboss.seam.ui.ValidateAll</display-name>
            <component-type>org.jboss.seam.ui.ValidateAll</component-type>
            <renderer-type>org.jboss.seam.ui.ValidateAllRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>defaultAction</tag-name>
        <component>
            <description>Simulate pressing the action source when 'enter' is pressed.</description>
            <display-name>org.jboss.seam.ui.DefaultAction</display-name>
            <component-type>org.jboss.seam.ui.DefaultAction</component-type>
            <renderer-type>org.jboss.seam.ui.DefaultActionRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon/>
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>conversationId</tag-name>
        <component>
            <description>Add the conversation id to JSF link or button (e.g. &lt;h:commandLink /&gt;, &lt;s:button /&gt;).</description>
            <display-name>org.jboss.seam.ui.ConversationId</display-name>
            <component-type>org.jboss.seam.ui.ConversationId</component-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the parameter associated with this component.</description>
            <display-name>Property Name</display-name>
            <icon/>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Value of the parameter associated with this component.</description>
            <display-name>Property Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>graphicImage</tag-name>
        <component>
            <description>Output an image to the view. You can specify the file as a path, a java.io.File, java.io.InputStream, java.net.URL or byte[]</description>
            <display-name>org.jboss.seam.ui.graphicImage.GraphicImage</display-name>
            <component-type>org.jboss.seam.ui.graphicImage.GraphicImage</component-type>
            <renderer-type>org.jboss.seam.ui.graphicImage.GraphicImageRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon/>
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>File name for the generated URL - allows a stable file name and thus browser caching</description>
            <name>fileName</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon/>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon/>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon/>
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Context-relative URL to retrieve the resource associated with this component. This is an alias for the "value" property.</description>
            <display-name>Source URL</display-name>
            <icon/>
            <name>url</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>download</tag-name>
        <component>
            <description>Link for downloading a file</description>
            <display-name>org.jboss.seam.ui.Download</display-name>
            <component-type>org.jboss.seam.ui.Download</component-type>
            <renderer-type>org.jboss.seam.ui.DownloadRenderer</renderer-type>
        </component>
        <attribute>
            <description>Access key that, when pressed, transfers focus to this element.</description>
            <display-name>Access Key</display-name>
            <icon/>
            <name>accesskey</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
            <display-name>Application Action</display-name>
            <icon/>
            <name>action</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Action Listener</display-name>
            <icon/>
            <name>actionListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The name of the conversation for natural conversations</description>
            <name>conversationName</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon/>
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon/>
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If true, write the link as disabled in HTML</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>the fragment identifier to link to.</description>
            <name>fragment</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <display-name>Immediate Action</display-name>
            <icon/>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Include page parameters defined in pages.xml when rendering the button</description>
            <name>includePageParams</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon/>
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The outcome to use when evaluating navigation rules</description>
            <name>outcome</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>a pageflow definition to begin. (This is only useful when propagation="begin" or propagation="join".)</description>
            <name>pageflow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>determines the conversation propagation style: begin, join, nest, none, end or endRoot.</description>
            <name>propagation</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Source xhtml file that acts as resource holder</description>
            <name>src</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon/>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon/>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Specify the task to operate on (e.g. for @StartTask)</description>
            <name>taskInstance</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon/>
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Context-relative URL to retrieve the resource associated with this component. This is an alias for the "value" property.</description>
            <display-name>Source URL</display-name>
            <icon/>
            <name>url</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>the JSF view id to link to.</description>
            <name>view</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>conversationName</tag-name>
        <component>
            <description>Set the conversation name for a command link or button (or similar JSF control).</description>
            <display-name>org.jboss.seam.ui.ConversationName</display-name>
            <component-type>org.jboss.seam.ui.ConversationName</component-type>
            <renderer-type>org.jboss.seam.ui.ConversationNameRenderer</renderer-type>
            <handler-class>org.jboss.seam.ui.handler.CommandButtonParameterComponentHandler</handler-class>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the parameter associated with this component.</description>
            <display-name>Property Name</display-name>
            <icon/>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Value of the parameter associated with this component.</description>
            <display-name>Property Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>transformImageBlur</tag-name>
        <component>
            <description>Nested in a s:graphicImage. Transform an image by applying a blur.</description>
            <display-name>org.jboss.seam.ui.graphicImage.TransformImageBlur</display-name>
            <component-type>org.jboss.seam.ui.graphicImage.TransformImageBlur</component-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The radius of the blur (essentially the amount of blur)</description>
            <name>radius</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>fileUpload</tag-name>
        <component>
            <description>Renders a file upload control. This control must be used within a form with an encoding type of multipart/form-data</description>
            <display-name>org.jboss.seam.ui.FileUpload</display-name>
            <component-type>org.jboss.seam.ui.FileUpload</component-type>
            <renderer-type>org.jboss.seam.ui.FileUploadRenderer</renderer-type>
        </component>
        <attribute>
            <description>a comma-separated list of content types to accept, may not be supported by the browser. E.g. "images/png,images/jpg", "images/*".</description>
            <name>accept</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>the property to receive the contentType</description>
            <name>contentType</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon/>
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon/>
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>this value binding receives the file's content type (optional).</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>this value binding receives the filename (optional).</description>
            <name>fileName</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>this value binding receives the file size (optional).</description>
            <name>fileSize</name>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon/>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <display-name>Focus Off Script</display-name>
            <icon/>
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus.</description>
            <display-name>Focus On Script</display-name>
            <icon/>
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon/>
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon/>
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon/>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon/>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767.</description>
            <display-name>Tab Index</display-name>
            <icon/>
            <name>tabindex</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon/>
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon/>
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon/>
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon/>
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>fragment</tag-name>
        <component>
            <description>Surround a page fragment, allows you to apply render/not render without any html output.</description>
            <display-name>org.jboss.seam.ui.Fragment</display-name>
            <component-type>org.jboss.seam.ui.Fragment</component-type>
            <renderer-type>org.jboss.seam.ui.renderkit.FragmentRendererBase</renderer-type>
        </component>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>selectItems</tag-name>
        <component>
            <description>Creates a List&lt;SelectItem&gt; from a List, Set, DataModel or Array.</description>
            <display-name>org.jboss.seam.ui.SelectItems</display-name>
            <component-type>org.jboss.seam.ui.SelectItems</component-type>
        </component>
        <attribute>
            <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
            <display-name>Application Action</display-name>
            <icon/>
            <name>action</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Action Listener</display-name>
            <icon/>
            <name>actionListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon/>
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>if true the SelectItem will be rendered disabled. Can reference the var variable</description>
            <name>disabled</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>if false, characters in the label will not be escaped. Beware that this is a safety issue when the label is in any way derived from input supplied by the application's user. . Can reference the var variable</description>
            <name>escape</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>if true, the noSelectionLabel will be hidden when a value is selected</description>
            <name>hideNoSelectionLabel</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon/>
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <display-name>Immediate Action</display-name>
            <icon/>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Value to return to the server if this option is selected. Optional, by default the var object is used. Can reference the var variable</description>
            <name>itemValue</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>the label to be used when rendering the SelectItem. Can reference the var variable</description>
            <name>label</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>specifies the (optional) label to place at the top of list (if required="true" is also specified then selecting this value will cause a validation error)</description>
            <name>noSelectionLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon/>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>defines the name of the local variable that holds the current object during iteration</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <!--Converter added by seam-cdk-helper plugin-->
    <tag>
        <tag-name>atomicIntegerConverter</tag-name>
        <converter>
            <description>
            Converter for java.util.concurrent.atomic.AtomicInteger
        </description>
            <converter-id>org.jboss.seam.ui.AtomicIntegerConverter</converter-id>
        </converter>
    </tag>
    <!--Converter added by seam-cdk-helper plugin-->
    <tag>
        <tag-name>atomicLongConverter</tag-name>
        <converter>
            <description>
            Converter for java.util.concurrent.atomic.AtomicLong
        </description>
            <converter-id>org.jboss.seam.ui.AtomicLongConverter</converter-id>
        </converter>
    </tag>
    <!--Converter added by seam-cdk-helper plugin-->
    <tag>
        <tag-name>convertDateTime</tag-name>
        <converter>
            <description>
            Perform date or time conversions in the Seam timezone.
        </description>
            <converter-id>org.jboss.seam.ui.DateTimeConverter</converter-id>
        </converter>
        <attribute>
            <description>Predefined formatting style which determines how the time component of a date string is to be formatted and parsed. Applied only if type is "time" or "both". Valid values are "default", "short", "medium", "long", and "full". Default value is "default".</description>
            <name>timeStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Predefined formatting style which determines how the date component of a date string is to be formatted and parsed. Applied only if type is "date" or "both". Valid values are "default", "short", "medium", "long", and "full". Default value is "default".</description>
            <name>dateStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Custom formatting pattern which determines how the date/time string should be formatted and parsed.</description>
            <name>pattern</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Locale whose predefined styles for dates and times are used during formatting or parsing. If not specified, the Locale returned by FacesContext.getViewRoot().getLocale() will be used. Value must be either a VB expression that evaluates to a java.util.Locale instance, or a String that is valid to pass as the first argument to the constructor java.util.Locale(String language, String country). The empty string is passed as the second argument.</description>
            <name>locale</name>
            <type>java.util.Locale</type>
        </attribute>
        <attribute>
            <description>Time zone in which to interpret any time information in the date String. Value must be either a VB expression that evaluates to a java.util.TimeZone instance, or a String that is a timezone ID as described in the javadocs for java.util.TimeZone.getTimeZone().</description>
            <name>timeZone</name>
            <type>java.util.TimeZone</type>
        </attribute>
        <attribute>
            <description>Specifies what contents the string value will be formatted to include, or parsed expecting. Valid values are "date", "time", and "both". Default value is "date".</description>
            <name>type</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <!--Converter added by seam-cdk-helper plugin-->
    <tag>
        <tag-name>atomicBooleanConverter</tag-name>
        <converter>
            <description>
            Converter for java.util.concurrent.atomic.AtomicBoolean
        </description>
            <converter-id>org.jboss.seam.ui.AtomicBooleanConverter</converter-id>
        </converter>
    </tag>
    <!--Converter added by seam-cdk-helper plugin-->
    <tag>
        <tag-name>convertEnum</tag-name>
        <converter>
            <description>
            Convert an enum.
        </description>
            <converter-id>org.jboss.seam.ui.EnumConverter</converter-id>
        </converter>
    </tag>
    <!--Converter added by seam-cdk-helper plugin-->
    <tag>
        <tag-name>convertEntity</tag-name>
        <converter>
            <description>
            Convert an entity.
        </description>
            <converter-id>org.jboss.seam.ui.EntityConverter</converter-id>
        </converter>
    </tag>
    <!--Converter added by seam-cdk-helper plugin-->
    <tag>
        <tag-name>validate</tag-name>
        <validator>
            <description>
            Validate the JSF component against the model
        </description>
            <validator-id>org.jboss.seam.ui.ModelValidator</validator-id>
        </validator>
    </tag>
    <!--Converter added by seam-cdk-helper plugin-->
    <tag>
        <tag-name>validateFormattedText</tag-name>
        <validator>
            <description>
            Validate Seam Text input
        </description>
            <validator-id>org.jboss.seam.ui.FormattedTextValidator</validator-id>
        </validator>
    </tag>
</facelet-taglib>
